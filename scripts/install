#!/bin/bash

source .fonctions	# Charge les fonctions génériques habituellement utilisées dans le script

CLEAN_SETUP () {
# Nettoyage des résidus d'installation non pris en charge par le script remove.
	# Clean hosts
	sudo sed -i '/#wordpress_yunohost/d' /etc/hosts
}
TRAP_ON	# Active trap pour arrêter le script si une erreur est détectée.

# Retrieve arguments
domain=$YNH_APP_ARG_DOMAIN
path=$YNH_APP_ARG_PATH
admin_wordpress=$YNH_APP_ARG_ADMIN
language=$YNH_APP_ARG_LANGUAGE
multisite=$YNH_APP_ARG_MULTISITE
is_public=$YNH_APP_ARG_IS_PUBLIC

app=$YNH_APP_INSTANCE_NAME

# Source app helpers
source /usr/share/yunohost/helpers

# Vérifie que les variables ne sont pas vides.
CHECK_VAR "$app" "app name not set"


CHECK_USER "$admin_wordpress"	# Vérifie la validité de l'user admin

CHECK_PATH	# Vérifie et corrige la syntaxe du path.
CHECK_DOMAINPATH	# Vérifie la disponibilité du path et du domaine.

CHECK_FINALPATH	# Vérifie que le dossier de destination n'est pas déjà utilisé.

if [ "$path" == "/" ] && [ "$multisite" = "Yes" ]; then
    echo "Multisite option of wordpress doesn't work at root of domain." >&2
	false
fi

# Enregistre les infos dans la config YunoHost
sudo yunohost app setting $app domain -v $domain
sudo yunohost app setting $app path -v $path
sudo yunohost app setting $app admin -v $admin_wordpress
sudo yunohost app setting $app is_public -v $is_public
sudo yunohost app setting $app language -v $language
sudo yunohost app setting $app multisite -v $multisite

GENERATE_DB $app	# Créer une base de données et un utilisateur dédié au nom de l'app.


# Crée le repertoire de destination et stocke son emplacement.
sudo mkdir "$final_path"
sudo yunohost app setting $app final_path -v $final_path


SETUP_SOURCE "wordpress.tar.gz"	# Télécharge la source, décompresse et copie dans $final_path

# Et copie le fichier de config nginx
sudo cp ../conf/nginx.conf /etc/nginx/conf.d/$domain.d/$app.conf


# Modifie les variables dans le fichier de configuration nginx
sudo sed -i "s@__PATHTOCHANGE__@$path@g" /etc/nginx/conf.d/$domain.d/$app.conf
sudo sed -i "s@__FINALPATH__@$final_path@g" /etc/nginx/conf.d/$domain.d/$app.conf
sudo sed -i "s@__NAMETOCHANGE__@$app@g" /etc/nginx/conf.d/$domain.d/$app.conf

POOL_FPM	# Créer le fichier de configuration du pool php-fpm et le configure.


sudo cp ../conf/wp-config.php $final_path/wp-config.php

# Change variables in Wordpress configuration
sudo sed -i "s/__DB_USER__/$db_user/g" $final_path/wp-config.php
sudo sed -i "s/__DB_PWD__/$db_pwd/g" $final_path/wp-config.php
sudo sed -i "s/__DOMAIN__/$domain/g" $final_path/wp-config.php
sudo sed -i "s@__PATH__@$path@g" $final_path/wp-config.php


for i in 1 2 3 4 5 6 7 8
do
    j=$(dd if=/dev/urandom bs=1 count=200 2> /dev/null | tr -c -d '[A-Za-z0-9]' | sed -n 's/\(.\{40\}\).*/\1/p')
    if [ "$j" = "" ];
    then
        # For obscure reasons, the loop is too fast at execution
        sleep 1
        j=$(dd if=/dev/urandom bs=1 count=200 2> /dev/null | tr -c -d '[A-Za-z0-9]' | sed -n 's/\(.\{40\}\).*/\1/p')
    fi
    sudo sed -i "s/KEY$i/$j/g" $final_path/wp-config.php
done

# Set permissions to wordpress directory
sudo chown -R www-data: $final_path

# Donne un accès public pour curl
sudo yunohost app setting $app unprotected_uris -v "/"
# Recharge la configuration Nginx
sudo service nginx reload
# Régénère la configuration de SSOwat
sudo yunohost app ssowatconf


# Wordpress installation
echo "127.0.0.1 $domain #wordpress_yunohost" | sudo tee -a /etc/hosts
curl -kL --data "&weblog_title=YunoBlog&user_name=$admin_wordpress&admin_password=$db_pwd&admin_password2=$db_pwd&admin_email=$admin_wordpress@$domain&language=$language&Submit=Install+WordPress" https://$domain$path/wp-admin/install.php?step=2 > /dev/null 2>&1

for i in `seq 1 30`
do	# La boucle attend la fin de l'installation de wordpress Ou 30 secondes.
	if mysql --debug-check -u $db_user -p$db_pwd $db_user -e "show tables" | grep -q "wp_options"; then
		break	# Si la table wp_options est trouvée, l'installation de wordpress est terminée. Quitte la boucle.
	fi
	echo -n "." >&2
	sleep 1
done

# Replace variables in sql scripts
sudo sed -i "s@__DOMAIN_PATH__@$domain$path@g" ../conf/sql/*.sql
sudo sed -i "s/__LANGUAGE__/$language/g" ../conf/sql/*.sql
sudo sed -i "s/__DATE__/$(date +%s)/g" ../conf/sql/*.sql

# Charge les commandes sql communes à tous les scripts.
mysql --debug-check -u $db_user -p$db_pwd $db_user < ../conf/sql/common.sql

if [ "$multisite" = "Yes" ]
then
	# Installation de php5-cli pour wp-cli
	sudo apt-get update
	sudo apt-get install php5-cli -qy

    sudo sed -i "s@#--MULTISITE--@@g" /etc/nginx/conf.d/$domain.d/$app.conf
    # Autorise le multisite wordpress
    sudo sed -i "s@//--MULTISITE1--define@define@g" $final_path/wp-config.php

	# Active le multisite via wp-cli.
  	php $final_path/wp-cli.phar core multisite-convert --path=$final_path --base=$path/ > /dev/null 2>&1
# 	echo "The 2 warnings of php about \"Permission denied\" on wp-config.php are normal. The install script writing into this file, not wp-cli!"

    # Active le multisite wordpress
    sudo sed -i "s@//--MULTISITE2--define@define@g" $final_path/wp-config.php

    # Charge les commandes sql pour activer les plugins
    if [ "$is_public" = "No" ];
    then
		sudo sed -i "s@#--PRIVATE--@@g" ../conf/sql/multisite.sql
    else
		sudo sed -i "s@#--PUBLIC--@@g" ../conf/sql/multisite.sql
    fi
	mysql --debug-check -u $db_user -p$db_pwd $db_user < ../conf/sql/multisite.sql
else
	if [ "$is_public" = "No" ];
	then
		sudo sed -i "s@#--PRIVATE--@@g" /etc/nginx/conf.d/$domain.d/$app.conf
		sudo sed -i "s@#--PRIVATE--@@g" ../conf/sql/single.sql
	else
		sudo sed -i "s@//--PUBLIC--define@define@g" $final_path/wp-config.php
		sudo sed -i "s@#--PRIVATE--@#@g" /etc/nginx/conf.d/$domain.d/$app.conf
		sudo sed -i "s@#--PUBLIC--@@g" ../conf/sql/single.sql
	fi
	# Charge les commandes sql pour activer les plugins
	mysql --debug-check -u $db_user -p$db_pwd $db_user < ../conf/sql/single.sql
fi

# Décommente les add_filter, qui auraient provoqué une erreur avec wp-cli
sudo sed -i "s@//add_filter@add_filter@g" $final_path/wp-config.php

STORE_MD5_CONFIG "wp-config.php" "$final_path/wp-config.php"	# Enregistre la somme de contrôle du fichier de config


# Configure les droits d'accès au fichiers
# Les fichiers appartiennent à www-data, pour permettre les mises à jour.
sudo chown -R www-data: $final_path
# Sauf le fichier de config wp-config.php qui appartient à root
sudo chown root: $final_path/wp-config.php

if [ "$is_public" = "No" ];
then
	# Retire l'accès public
	sudo yunohost app setting $app unprotected_uris -d
	sudo yunohost app ssowatconf
fi

# Clean hosts
sudo sed -i '/#wordpress_yunohost/d' /etc/hosts

sudo service nginx reload

# wp-cli me semble un peu trop permissif... Il a terminé son travail...
sudo rm -f $final_path/wp-cli.phar
